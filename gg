#!/usr/bin/env node
'use strict';

const prog = require('caporal');
const app = require('./app.js');

const ora = require('ora');
const exec = require('child_process').exec;
const util = require('./command/common/util');
const { getInstalledPath } = require('get-installed-path');
const inquirer = require('inquirer');
const opener = require("opener");
const request = require('request');
const colors = require('colors');
const sudo = require('sudo');

//commands
const projectInit = require('./command/project-init');
const projectBuild = require('./command/project-build');
const projectEntity = require('./command/project-entity');
const projectService = require('./command/project-service');
const projectAPI = require('./command/project-api');
const projectFRONT = require('./command/project-front');
const projectStart = require('./command/project-start');

let version = require('./package.json').version;

prog
  .version(version)
  //start app
  .command('init', 'Crie um novo projeto')
  .argument('[artifactId]', 'Nome do artefato', /^[a-zA-Z0-9]+$/g)
  .argument('[groupId]', 'Nome do grupo')
  .argument('[version]', 'Versão do projeto')
  .action((args, options, logger) => projectInit.run(args, options, logger))
  //build
  .command('build', 'Faz a compilação dos módulos')
  .argument('[run]', 'Executa os modulos após o build.')
  .argument('[module]', 'Modulo a ser executado. front | back', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectBuild.run(args, options, logger))
  //create entity
  .command('entity', 'Gera uma nova entidade')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectEntity.run(args, options, logger))
  //service
  .command('service', 'Gera uma service')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectService.run(args, options, logger))
  //api
  .command('api', 'Gera uma API')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectAPI.run(args, options, logger))
  //presentation
  .command('presentation', 'Gera o front-end')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectFRONT.run(args, options, logger))
  //run application
  .command('run', 'Inicia o back-end e front-end')
  .argument('[module]', 'Modulo a ser executado. front | back', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectStart.run(args, options, logger))



request.get({ url: 'https://unpkg.com/gumga-cli@latest/package.json', followRedirect: true }, function (err, res, body) {
  if(err != null){
    app.run(prog);
    return;
  }

  let npmPackage = JSON.parse(body);
  let size = npmPackage.version.split('.').join('').length > version.split('.').join('').length ? version.split('.').join('').length : npmPackage.version.split('.').join('').length;
  let last = npmPackage.version.split('.').join('').substring(0, size);
  let current = version.split('.').join('').substring(0, size);
  if (parseInt(last) > parseInt(current)) {
    inquirer.prompt([
      {
        type: 'confirm',
        name: 'update',
        message: (`Nova versão disponivel, atualizar de ` + version.green + ` para ` + npmPackage.version.green).bold
      }
    ]).then(resp => {
      if (resp.update) {
        console.log('> npm install -g gumga-cli@latest'.cyan);
        let command = 'npm install -g gumga-cli@latest --force --unsafe-perm';

        if (process.platform != 'linux' && process.platform != 'darwin') {
          let spinner = ora('Executando comando...').start();
          exec(command, { maxBuffer: Infinity }, function (error, stdout, stderr) {
            if (error !== null) {
              spinner.fail(`Problemas atualizar o gg, atualize manualmente. \n`);
            } else {
              spinner.succeed('Atualização concluída.');
            }
          });
        }

        if (process.platform == 'linux' || process.platform == 'darwin') {

          exec('sudo echo gg', { maxBuffer: Infinity }, function (error, stdout, stderr) {
            if (error !== null) {
              spinner.fail(`Senha incorreta, tente novamente. \n`);
              process.exit();
            } else {
              let spinner = ora('Executando comando...').start();
              command = 'sudo ' + command;
              exec(command, { maxBuffer: Infinity }, function (error, stdout, stderr) {
                if (error !== null) {
                  spinner.fail(`Problemas atualizar o gg, atualize manualmente. \n`);
                  process.exit();
                } else {
                  spinner.succeed('Atualização concluída.');
                }
              });
            }
          });

        }

      } else {
        app.run(prog);
      }
    })
  } else {
    app.run(prog);
  }
});
