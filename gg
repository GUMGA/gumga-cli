#!/usr/bin/env node
const prog = require('caporal');
const app = require('./app.js');

const ora = require('ora');
const exec = require('child_process').exec;
const util = require('./command/common/util');
const { getInstalledPath } = require('get-installed-path');
const inquirer = require('inquirer');
const opener = require("opener");

//commands
const projectInit = require('./command/project-init');
const projectBuild = require('./command/project-build');
const projectEntity = require('./command/project-entity');
const projectService = require('./command/project-service');
const projectAPI = require('./command/project-api');
const projectFRONT = require('./command/project-front');
const projectStart = require('./command/project-start');

prog
  .version(require('./package.json').version)
  //start app
  .command('init', 'Crie um novo projeto')
  .argument('[artifactId]', 'Nome do artefato', /^[a-zA-Z0-9]+$/g)
  .argument('[groupId]', 'Nome do grupo')
  .argument('[version]', 'Versão do projeto')
  .action((args, options, logger) => projectInit.run(args, options, logger))
  //build
  .command('build', 'Faz a compilação dos módulos')
  .argument('[run]', 'Executa os modulos após o build.')
  .argument('[module]', 'Modulo a ser executado. front | back', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectBuild.run(args, options, logger))
  //create entity
  .command('entity', 'Gera uma nova entidade')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectEntity.run(args, options, logger))
  //service
  .command('service', 'Gera uma service')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectService.run(args, options, logger))
  //api
  .command('api', 'Gera uma API')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectAPI.run(args, options, logger))
  //presentation
  .command('presentation', 'Gera o front-end')
  .argument('[entityName]', 'Nome da entidade', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectFRONT.run(args, options, logger))
  //run application
  .command('run', 'Inicia o back-end e front-end')
  .argument('[module]', 'Modulo a ser executado. front | back', /^[a-zA-Z]+$/g)
  .action((args, options, logger) => projectStart.run(args, options, logger))


app.run(prog);
